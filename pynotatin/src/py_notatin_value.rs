/*
 * Copyright 2021 Aon Cyber Solutions
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

use crate::py_notatin_content::PyNotatinContent;
use pyo3::prelude::*;

use notatin::{
    cell_key_value::CellKeyValue,
    cell_value::{CellValue, DecodableValue, DecodeFormat},
};
use pyo3::{Py, PyResult, Python};

#[pyclass(subclass)]
pub struct PyNotatinValue {
    inner: CellKeyValue,
}

#[pymethods]
impl PyNotatinValue {
    #[getter]
    pub fn value(&self, py: Python) -> PyObject {
        pyo3::types::PyBytes::new(
            py,
            &self.inner.detail.value_bytes.clone().unwrap_or_default(),
        )
        .to_object(py)
    }

    #[getter]
    pub fn pretty_name(&self, py: Python) -> PyObject {
        self.inner.get_pretty_name().to_object(py)
    }

    #[getter]
    pub fn name(&self, py: Python) -> PyObject {
        self.inner.value_name.to_object(py)
    }

    #[getter]
    pub fn raw_data_type(&self, py: Python) -> PyObject {
        self.inner.detail.data_type_raw.to_object(py)
    }

    #[getter]
    pub fn data_type(&self, py: Python) -> PyObject {
        self.inner.detail.data_type_raw.to_object(py)
    }

    #[getter]
    pub fn content(&self, py: Python) -> Option<PyObject> {
        let (content, _) = self.inner.get_content();
        Self::prepare_content(py, &content)
    }

    pub fn decode(
        &self,
        py: Python,
        format: &PyNotatinDecodeFormat,
        offset: usize,
    ) -> PyResult<Py<PyNotatinContent>> {
        let (decoded_content, _) = self.inner.decode_content(&format.inner, offset); // in both of these functions I am ignoring any logs that are returned. Best way to handle these in python?
        Py::new(
            py,
            PyNotatinContent {
                inner: decoded_content,
            },
        )
    }
}

impl PyNotatinValue {
    pub fn from_cell_key_value(
        py: Python,
        cell_key_value: CellKeyValue,
    ) -> PyResult<Py<PyNotatinValue>> {
        Py::new(
            py,
            PyNotatinValue {
                inner: cell_key_value,
            },
        )
    }

    pub(crate) fn prepare_content(py: Python, content: &CellValue) -> Option<PyObject> {
        match content {
            CellValue::ValueString(content) => Some(content.to_object(py)),
            CellValue::ValueI32(content) => Some(content.to_object(py)),
            CellValue::ValueU32(content) => Some(content.to_object(py)),
            CellValue::ValueU64(content) => Some(content.to_object(py)),
            CellValue::ValueI64(content) => Some(content.to_object(py)),
            CellValue::ValueMultiString(content) => Some(content.to_object(py)),
            CellValue::ValueBinary(content) => {
                Some(pyo3::types::PyBytes::new(py, content).to_object(py))
            }
            _ => None,
        }
    }
}

#[pyclass]
pub struct PyNotatinDecodeFormat {
    pub inner: DecodeFormat,
}

#[pymethods]
impl PyNotatinDecodeFormat {
    #[classattr]
    fn lznt1() -> Self {
        PyNotatinDecodeFormat {
            inner: DecodeFormat::Lznt1,
        }
    }

    #[classattr]
    fn rot13() -> Self {
        PyNotatinDecodeFormat {
            inner: DecodeFormat::Rot13,
        }
    }

    #[classattr]
    fn utf16() -> Self {
        PyNotatinDecodeFormat {
            inner: DecodeFormat::Utf16,
        }
    }

    #[classattr]
    fn utf16_multiple() -> Self {
        PyNotatinDecodeFormat {
            inner: DecodeFormat::Utf16Multiple,
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use notatin::{
        cell::CellState,
        cell_key_value::{CellKeyValueDataTypes, CellKeyValueDetail, CellKeyValueFlags},
        log::Logs,
    };

    #[test]
    fn test_get_content() {
        let mut py_reg_value = PyNotatinValue {
            inner: CellKeyValue {
                detail: CellKeyValueDetail {
                    file_offset_absolute: 0,
                    size: 48,
                    value_name_size: 18,
                    data_size_raw: 8,
                    data_offset_relative: 3864,
                    data_type_raw: 1,
                    flags_raw: 1,
                    padding: 0,
                    value_bytes: None,
                    slack: vec![0, 0, 1, 0, 0, 0],
                },
                data_type: CellKeyValueDataTypes::REG_SZ,
                flags: CellKeyValueFlags::VALUE_COMP_NAME_ASCII,
                value_name: "IE5_UA_Backup_Flag".to_string(),
                cell_state: CellState::Allocated,
                data_offsets_absolute: Vec::new(),
                logs: Logs::default(),
                versions: Vec::new(),
                hash: None,
                sequence_num: None,
                updated_by_sequence_num: None,
            },
        };
        py_reg_value.inner.detail.value_bytes = Some(vec![53, 0, 46, 0, 48, 0, 0, 0]);
        let gil = Python::acquire_gil();
        let py = gil.python();

        let content: std::result::Result<String, pyo3::PyErr> =
            py_reg_value.content(py).unwrap().extract(py);
        assert_eq!(content.unwrap(), "5.0".to_string());
    }

    #[test]
    fn test_decode_content() {
        let gil = Python::acquire_gil();
        let py = gil.python();

        let lznt1 = vec![
            0x60, 0x05, 0x00, 0x00, 0xD3, 0x0C, 0x00, 0x00, 0x55, 0xB5, 0x00, 0x0A, 0x00, 0x0C,
            0x00, 0xD3, 0x0C, 0x00, 0x00, 0x00, 0x76, 0x12, 0x6F, 0x68, 0x11, 0x1F, 0xD7, 0x01,
            0x00, 0xF7, 0x6D, 0x1F, 0x02, 0x10, 0x00, 0x00, 0x00, 0xAA, 0x0A, 0x00, 0x18, 0x70,
            0x00, 0x18, 0x18, 0x00, 0x0C, 0x58, 0x04, 0x1C, 0x00, 0x10, 0x01, 0x00, 0x00, 0x72,
            0xB8, 0x4F, 0x46, 0x00, 0x60, 0x1A, 0xD7, 0x01, 0x00, 0x40, 0x5D, 0x24, 0x00, 0x2E,
            0x19, 0xD7, 0x01, 0x80, 0x3A, 0x09, 0x00, 0xA0, 0x10, 0x0E, 0x00, 0x00, 0x15, 0x00,
            0x46, 0x00, 0x00, 0x3E, 0x83, 0x01, 0x56, 0x01, 0x14, 0x30, 0x03, 0x00, 0x00, 0x30,
            0x00, 0x10, 0x06, 0xB8, 0x00, 0x0E, 0x01, 0x26, 0x20, 0x06, 0x00, 0x00, 0x1C, 0xC1,
            0x00, 0x1E, 0x18, 0x02, 0x00, 0x00, 0x28, 0x00, 0x4E, 0x02, 0x16, 0x55, 0x00, 0x1E,
            0x34, 0x00, 0x0F, 0x40, 0x08, 0x0F, 0x50, 0x00, 0x0F, 0x58, 0x55, 0x08, 0x0F, 0x6C,
            0x00, 0x0F, 0x70, 0x08, 0x0F, 0x88, 0x00, 0x0F, 0x88, 0x55, 0x08, 0x0F, 0xA4, 0x00,
            0x0F, 0xA0, 0x08, 0x0F, 0xC0, 0x00, 0x0F, 0xB8, 0x55, 0x08, 0x0F, 0xDC, 0x00, 0x0F,
            0xD0, 0x08, 0x0F, 0xF8, 0x00, 0x0F, 0xE8, 0xB5, 0x08, 0x0F, 0x14, 0x80, 0x4F, 0x00,
            0x80, 0x09, 0x85, 0x47, 0x60, 0x80, 0x07, 0xD2, 0x08, 0x80, 0x4B, 0x10, 0x04, 0x83,
            0x5F, 0x3C, 0x80, 0x5B, 0x81, 0x81, 0xAA, 0x68, 0x84, 0x0B, 0x40, 0x84, 0x0B, 0x54,
            0x84, 0x0B, 0x70, 0x84, 0x0B, 0xAA, 0x70, 0x84, 0x0B, 0x6C, 0x84, 0x0B, 0x78, 0x84,
            0x0B, 0xA0, 0x84, 0x0B, 0xAA, 0x84, 0x84, 0x0B, 0x80, 0x84, 0x0B, 0xD0, 0x84, 0x0B,
            0x9C, 0x84, 0x0B, 0x52, 0x88, 0x84, 0x0B, 0x00, 0x05, 0x83, 0x3B, 0xB4, 0x84, 0x0B,
            0x90, 0x55, 0x84, 0x0B, 0x30, 0x84, 0x0B, 0xCC, 0x84, 0x0B, 0x98, 0x84, 0x0B, 0x60,
            0x55, 0x84, 0x0B, 0xE4, 0x84, 0x0B, 0xA0, 0x84, 0x0B, 0x90, 0x84, 0x0B, 0xFC, 0x15,
            0x84, 0x0B, 0xA8, 0x84, 0x0B, 0xC0, 0x84, 0x0B, 0x14, 0x07, 0x00, 0xAA, 0x00, 0x81,
            0x6B, 0xB0, 0xC4, 0x05, 0xF0, 0xC4, 0x05, 0x2C, 0xC4, 0x05, 0x1A, 0x44, 0xC0, 0x01,
            0x32, 0xC0, 0x41, 0x85, 0x00, 0x15, 0xC1, 0x5B, 0xA8, 0x4A, 0xB8, 0x72, 0x43, 0x03,
            0xAA, 0xC0, 0x06, 0x34, 0x05, 0x06, 0xC1, 0xC0, 0x01, 0x70, 0x9F, 0xE7, 0x4C, 0xF6,
            0x01, 0x75, 0xC0, 0x02, 0x1A, 0x14, 0x00, 0x4F, 0x2C, 0xC0, 0x01, 0x85, 0x00, 0x44,
            0xA1, 0xE7, 0x68, 0x4C, 0xDE, 0x23, 0x43, 0x04, 0x6E, 0xC0, 0x06, 0xC9, 0x0D, 0x4E,
            0x60, 0x54, 0xEF, 0x5D, 0xA1, 0xC6, 0x00, 0x5F, 0x00, 0x0B, 0xD8, 0x0D, 0xC0, 0x06,
            0x35, 0x05, 0x0D, 0xC0, 0x01, 0xF3, 0xE9, 0xAE, 0x50, 0x0C, 0x99, 0x85, 0x00, 0x6A,
            0xC0, 0x02, 0x44, 0x09, 0x00, 0x00, 0x01, 0xC9, 0x14, 0xFE, 0x4E, 0xC4, 0x57, 0x00,
            0x49, 0x31, 0x31, 0x40, 0x06, 0x00, 0x00, 0x9E, 0xC0, 0x06, 0xC9, 0x14, 0xBE, 0xA8,
            0xB0, 0x9E, 0x55, 0xA2, 0x6D, 0x00, 0x35, 0x40, 0x07, 0x08, 0x00, 0xB1, 0x06, 0x48,
            0x42, 0x09, 0x03, 0x01, 0x7C, 0xE3, 0x84, 0x5B, 0x53, 0x34, 0x6B, 0x46, 0x02, 0x03,
            0x9A, 0xC0, 0x06, 0xC9, 0x0D, 0xBF, 0xE0, 0x10, 0xC1, 0x5D, 0x0D, 0x35, 0xC3, 0x22,
            0x04, 0x0B, 0x00, 0x02, 0x00, 0xC9, 0x06, 0x96, 0xAE, 0x0E, 0x5E, 0xA3, 0x51, 0x5B,
            0x00, 0x48, 0x40, 0x0E, 0x6E, 0xC0, 0x06, 0xC1, 0xBA, 0x83, 0xC4, 0x01, 0x98, 0x55,
            0xC4, 0x01, 0xAD, 0xC4, 0x01, 0xC2, 0xC4, 0x01, 0xD7, 0xC4, 0x01, 0xEC, 0xAD, 0xC4,
            0x01, 0x01, 0xC0, 0xD8, 0xC1, 0x0D, 0x16, 0xC4, 0x01, 0x2B, 0xC4, 0x01, 0xAA, 0x40,
            0xC4, 0x01, 0x55, 0xC4, 0x01, 0x6A, 0xC4, 0x01, 0x7F, 0xC4, 0x01, 0x6A, 0x94, 0xC4,
            0x01, 0xA9, 0xC4, 0x01, 0xBE, 0xC4, 0x01, 0x80, 0x60, 0x00, 0x20, 0x24, 0x13, 0xA7,
            0x1E, 0x0D, 0xC0, 0x24, 0xE3, 0x5D, 0x0C, 0x27, 0x00, 0xC5, 0x01, 0x80, 0x35, 0x00,
            0xF6, 0x54, 0x7B, 0xAF, 0x81, 0x07, 0x40, 0x06, 0x97, 0x00, 0x01, 0x08, 0x18, 0xC0,
            0x0F, 0x4F, 0x40, 0x04, 0x10, 0x06, 0x84, 0xBB, 0x00, 0x61, 0x7E, 0xF8, 0x50, 0xA2,
            0xD7, 0x17, 0x06, 0x3C, 0x03, 0x61, 0x1B, 0xB0, 0xC3, 0x27, 0x00, 0xED, 0x00, 0x49,
            0x07, 0x21, 0xE1, 0x0E, 0x98, 0xEA, 0x71, 0x01, 0x40, 0x86, 0x00, 0x43, 0x84, 0x37,
            0x19, 0x41, 0x6F, 0x00, 0xE1, 0xC1, 0x05, 0xE6, 0x00, 0x1B, 0x65, 0x05, 0xE1, 0x04,
            0xC5, 0x80, 0x04, 0x41, 0x0A, 0x86, 0x2E, 0xE2, 0x21, 0xC1, 0x62, 0x00, 0xD1, 0x84,
            0x1A, 0x41, 0x8C, 0x00, 0xD2, 0x1C, 0x5C, 0x04, 0xE6, 0x00, 0xE5, 0x05, 0xE1, 0x04,
            0x80, 0x94, 0x1A, 0x91, 0xE2, 0x08, 0xD5, 0xB6, 0xE1, 0xE2, 0x00, 0x90, 0x0F, 0xA3,
            0x03, 0x87, 0xED, 0x00, 0xA1, 0x02, 0xE1, 0x05, 0x26, 0x11, 0x00, 0x00, 0xC0, 0x63,
            0xA0, 0x00, 0xB1, 0x2A, 0xA0, 0x01, 0xE1, 0x00, 0x4E, 0x60, 0x50, 0x1F, 0x61, 0x03,
            0xED, 0x00, 0x61, 0x02, 0xE5, 0x03, 0xC0, 0x76, 0x00, 0x8D, 0xAB, 0x88, 0x5E, 0x02,
            0x12, 0x80, 0x02, 0xA1, 0x61, 0x67, 0xE2, 0xA4, 0x78, 0x04, 0x9D, 0x15, 0xE6, 0x00,
            0x61, 0x05, 0x61, 0x00, 0xE1, 0x04, 0x31, 0x44, 0x0D, 0x3B, 0xE2, 0x10, 0xF7, 0x44,
            0x00, 0xE2, 0x00, 0x91, 0x7E, 0x43, 0xA3, 0x03, 0xED, 0x00, 0xA1, 0x02, 0xE1, 0x11,
            0xE1, 0x02, 0x21, 0x5E, 0x89, 0xFB, 0x00, 0x6F, 0xE1, 0x00, 0x78, 0x81, 0x0E, 0x80,
            0x03, 0xED, 0x00, 0xE1, 0x05, 0xE1, 0x03, 0x68, 0x9B, 0x2F, 0x00, 0xE2, 0x20, 0x6E,
            0x40, 0x53, 0xE1, 0x01, 0x27, 0xEF, 0x81, 0x0E, 0x80, 0x03, 0xED, 0x00, 0xE5, 0x05,
            0x6D, 0x01, 0x01, 0x64, 0x00, 0xC0, 0x66, 0x90, 0x00, 0x93, 0xFD, 0x1F, 0xA2, 0x01,
            0x6E, 0x39, 0xA1, 0x2D, 0x5C, 0x00, 0x00, 0xE5, 0x00, 0x44, 0x04, 0xC2, 0x00, 0x07,
            0xA0, 0x84, 0x23, 0xEC, 0x00, 0x23, 0x44, 0x02, 0x00, 0x26, 0x00, 0x63, 0x05, 0x04,
            0x02, 0xD6, 0x00, 0x8F, 0xE1, 0x11, 0x83, 0x03, 0x27, 0x01, 0xE1, 0x01, 0x24, 0x00,
            0x19, 0xC3, 0x02, 0xD8, 0x00, 0x13, 0x00, 0xC4, 0x2D, 0xE2, 0x01, 0x50, 0x22, 0x58,
            0x41, 0x01, 0xF2, 0x46, 0xE2, 0xC4, 0x00, 0x00, 0x63, 0x78, 0x23, 0x43, 0xE1, 0x02,
            0x27, 0x01, 0x7D, 0xA1, 0x01, 0x03, 0x22, 0x1F, 0x21, 0x01, 0x21, 0x27, 0xE1, 0x00,
            0x63, 0x00, 0x09, 0x04, 0x01, 0x27, 0x84, 0x01, 0xF6, 0x00, 0x82, 0x00, 0x25, 0xB3,
            0x60, 0x01, 0x83, 0x28, 0x0F, 0x00, 0x21, 0x1E, 0x41, 0x03, 0x0A, 0x24, 0x0B, 0xDF,
            0x61, 0x01, 0xE3, 0x32, 0x25, 0x01, 0x29, 0x15, 0x67, 0x01, 0x01, 0x26, 0x0D, 0xE1,
            0x04, 0x08, 0x90, 0x00, 0x29, 0xC3, 0x05, 0x00, 0x7F, 0x00, 0x11, 0x01, 0x24, 0x09,
            0x5C, 0x00, 0x44, 0x00, 0x45, 0x00, 0x56, 0x10, 0x00, 0x49, 0x00, 0x43, 0xE0, 0x00,
            0x5C, 0x00, 0x48, 0x50, 0x00, 0x41, 0x00, 0x52, 0x60, 0x02, 0x44, 0x20, 0x02, 0x53,
            0x04, 0x00, 0x4B, 0x20, 0x03, 0x4F, 0x00, 0x4C, 0x00, 0x55, 0x84, 0x00, 0x4D, 0xA0,
            0x03, 0x32, 0x00, 0x5C, 0x00, 0x80, 0x97, 0x54, 0x00, 0x4E, 0xE0, 0x03, 0x4F, 0x20,
            0x01, 0x53, 0xE0, 0x01, 0x53, 0x40, 0x00, 0x59, 0x00, 0x53, 0x00, 0x54, 0xA0, 0x03,
            0x4D, 0xA8, 0x00, 0x33, 0x00, 0x21, 0x04, 0x43, 0xE0, 0x01, 0x52, 0x60, 0x00, 0xA8,
            0x53, 0x00, 0x2E, 0xA0, 0x02, 0x58, 0x60, 0x00, 0x00, 0xE0, 0x04, 0x07, 0xBF, 0x0C,
            0xBF, 0x0C, 0xA9, 0x0C, 0x4C, 0x00, 0x4F, 0x00, 0x47, 0xF5, 0x30, 0x00, 0x4E, 0xB0,
            0x09, 0x49, 0x9F, 0x06, 0xFF, 0x0C, 0xFF, 0x0C, 0xD2, 0x0A, 0x41, 0xFD, 0x0C, 0x45,
            0x00, 0x58, 0x00, 0x50, 0x10, 0x0F, 0x4F, 0xDD, 0x50, 0x10, 0x45, 0x30, 0x00, 0x3F,
            0x0C, 0x9F, 0x12, 0x49, 0xD0, 0x0E, 0x9F, 0x12, 0xAB, 0x9F, 0x12, 0x9D, 0x12, 0x57,
            0xB0, 0x0B, 0x41, 0x30, 0x00, 0x43, 0xF0, 0x06, 0x7E, 0x54, 0x3F, 0x0C, 0x3F, 0x0C,
            0x3F, 0x0C, 0x3F, 0x0C, 0x3F, 0x19, 0x10, 0x01, 0x54, 0xFB, 0x50, 0x1D, 0xD1, 0x1C,
            0x48, 0x10, 0x13, 0xD1, 0x1A, 0x5F, 0x0D, 0x5F, 0x0D, 0x5F, 0x0D, 0xED, 0xFF, 0x1F,
            0x5C, 0x12, 0x1E, 0xFF, 0x12, 0x45, 0x70, 0x26, 0x9F, 0x25, 0x9F, 0x25, 0xD5, 0x3F,
            0x1F, 0x44, 0x10, 0x0A, 0x57, 0xF0, 0x14, 0x5C, 0x30, 0x00, 0xFD, 0x12, 0xD6, 0x4E,
            0xB0, 0x01, 0x31, 0x20, 0x50, 0xD0, 0x0C, 0x44, 0xFF, 0x12, 0xFF, 0x12, 0x5B, 0xFF,
            0x12, 0xF2, 0x12, 0x50, 0x70, 0x1D, 0xD1, 0x23, 0x52, 0x70, 0x04, 0x4D, 0xD0, 0x00,
            0x20, 0x00, 0x46, 0x70, 0x02, 0x4C, 0x90, 0x0C, 0xF1, 0x2C, 0xD5, 0x5B, 0x1B, 0x20,
            0xB0, 0x2E, 0x54, 0xF0, 0x13, 0x41, 0xD0, 0x31, 0xF1, 0x31, 0xB6, 0x53, 0x50, 0x09,
            0x91, 0x21, 0x49, 0xD6, 0x02, 0xD1, 0x00, 0x44, 0x10, 0x23, 0x7E, 0x41, 0x30, 0x31,
            0x5F, 0x15, 0x5F, 0x15, 0x5F, 0x15, 0x5F, 0x15, 0xBF, 0x0F, 0x5C, 0xD5, 0xF0, 0x07,
            0x4F, 0xB0, 0x08, 0x53, 0x70, 0x07, 0x4E, 0xD0, 0x36, 0x9F, 0x06, 0x7F, 0x9F, 0x06,
            0x9F, 0x06, 0x9F, 0x06, 0x9F, 0x06, 0x95, 0x06, 0x9F, 0x22, 0xA1, 0x43, 0x70, 0xC0,
            0x03, 0x08, 0x1E, 0x00, 0x00, 0x3C, 0xA1, 0x00, 0x3F, 0x00, 0x77, 0x1A, 0x01, 0xB0,
            0xA5, 0x90, 0x02, 0x24, 0x5F, 0x02, 0x1F, 0x01, 0x1F, 0x01, 0x00, 0x1E, 0x00, 0x83,
            0x06, 0x89, 0x8C, 0x5F, 0x02, 0x13, 0x01, 0x70, 0x01, 0x08, 0x6F, 0xA4, 0x66, 0x18,
            0x02, 0x4F, 0x01, 0xC0, 0x01, 0x60, 0x39, 0x52, 0xC5, 0x02, 0x20, 0xF9, 0x4F, 0x01,
            0x00, 0x00, 0x40, 0x01, 0x3F, 0x05, 0x60, 0x70, 0x30, 0x7D, 0x2F, 0x09, 0xFF, 0x9F,
            0x02, 0xB0, 0x05, 0x8B, 0x5D, 0xC4, 0x06, 0x24, 0x6E, 0xD4, 0x00, 0x64, 0x00, 0xC0,
            0xBB, 0x01, 0x78, 0x01,
        ];
        let py_notatin_value = PyNotatinValue {
            inner: CellKeyValue {
                detail: CellKeyValueDetail {
                    file_offset_absolute: 0,
                    size: 48,
                    value_name_size: 4,
                    data_size_raw: lznt1.len() as u32,
                    data_offset_relative: 3864,
                    data_type_raw: 1,
                    flags_raw: 1,
                    padding: 0,
                    value_bytes: Some(lznt1.clone()),
                    slack: vec![],
                },
                data_type: CellKeyValueDataTypes::REG_BIN,
                flags: CellKeyValueFlags::VALUE_COMP_NAME_ASCII,
                value_name: "test".to_string(),
                cell_state: CellState::Allocated,
                data_offsets_absolute: Vec::new(),
                logs: Logs::default(),
                versions: Vec::new(),
                hash: None,
                sequence_num: None,
                updated_by_sequence_num: None,
            },
        };

        let decoded_value = py_notatin_value
            .decode(py, &PyNotatinDecodeFormat::lznt1(), 8)
            .unwrap()
            .extract::<PyNotatinContent>(py)
            .unwrap()
            .content(py)
            .unwrap()
            .extract::<Vec<u8>>(py)
            .unwrap();
        let expected_output: Vec<u8> = [
            10, 0, 12, 0, 211, 12, 0, 0, 118, 18, 111, 104, 17, 31, 215, 1, 247, 109, 31, 2, 16, 0,
            0, 0, 10, 0, 0, 0, 112, 0, 0, 0, 24, 0, 0, 0, 88, 0, 0, 0, 24, 0, 0, 0, 16, 1, 0, 0,
            114, 184, 79, 70, 96, 26, 215, 1, 0, 64, 93, 36, 46, 25, 215, 1, 128, 58, 9, 0, 16, 14,
            0, 0, 21, 0, 0, 0, 0, 1, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 48, 3, 0, 0, 48, 0, 0, 0, 184,
            3, 0, 0, 88, 0, 0, 0, 32, 6, 0, 0, 28, 0, 0, 0, 24, 2, 0, 0, 40, 1, 0, 0, 28, 0, 0, 0,
            24, 0, 0, 0, 52, 2, 0, 0, 64, 1, 0, 0, 28, 0, 0, 0, 24, 0, 0, 0, 80, 2, 0, 0, 88, 1, 0,
            0, 28, 0, 0, 0, 24, 0, 0, 0, 108, 2, 0, 0, 112, 1, 0, 0, 28, 0, 0, 0, 24, 0, 0, 0, 136,
            2, 0, 0, 136, 1, 0, 0, 28, 0, 0, 0, 24, 0, 0, 0, 164, 2, 0, 0, 160, 1, 0, 0, 28, 0, 0,
            0, 24, 0, 0, 0, 192, 2, 0, 0, 184, 1, 0, 0, 28, 0, 0, 0, 24, 0, 0, 0, 220, 2, 0, 0,
            208, 1, 0, 0, 28, 0, 0, 0, 24, 0, 0, 0, 248, 2, 0, 0, 232, 1, 0, 0, 28, 0, 0, 0, 24, 0,
            0, 0, 20, 3, 0, 0, 0, 2, 0, 0, 28, 0, 0, 0, 24, 0, 0, 0, 96, 3, 0, 0, 8, 0, 0, 0, 16,
            4, 0, 0, 48, 0, 0, 0, 60, 6, 0, 0, 24, 0, 0, 0, 104, 3, 0, 0, 8, 0, 0, 0, 64, 4, 0, 0,
            48, 0, 0, 0, 84, 6, 0, 0, 24, 0, 0, 0, 112, 3, 0, 0, 8, 0, 0, 0, 112, 4, 0, 0, 48, 0,
            0, 0, 108, 6, 0, 0, 24, 0, 0, 0, 120, 3, 0, 0, 8, 0, 0, 0, 160, 4, 0, 0, 48, 0, 0, 0,
            132, 6, 0, 0, 24, 0, 0, 0, 128, 3, 0, 0, 8, 0, 0, 0, 208, 4, 0, 0, 48, 0, 0, 0, 156, 6,
            0, 0, 24, 0, 0, 0, 136, 3, 0, 0, 8, 0, 0, 0, 0, 5, 0, 0, 48, 0, 0, 0, 180, 6, 0, 0, 24,
            0, 0, 0, 144, 3, 0, 0, 8, 0, 0, 0, 48, 5, 0, 0, 48, 0, 0, 0, 204, 6, 0, 0, 24, 0, 0, 0,
            152, 3, 0, 0, 8, 0, 0, 0, 96, 5, 0, 0, 48, 0, 0, 0, 228, 6, 0, 0, 24, 0, 0, 0, 160, 3,
            0, 0, 8, 0, 0, 0, 144, 5, 0, 0, 48, 0, 0, 0, 252, 6, 0, 0, 24, 0, 0, 0, 168, 3, 0, 0,
            8, 0, 0, 0, 192, 5, 0, 0, 48, 0, 0, 0, 20, 7, 0, 0, 24, 0, 0, 0, 176, 3, 0, 0, 8, 0, 0,
            0, 240, 5, 0, 0, 48, 0, 0, 0, 44, 7, 0, 0, 24, 0, 0, 0, 68, 7, 0, 0, 50, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 21, 193, 91, 74, 184, 114, 0, 0, 0, 0, 0, 0, 170, 7, 0, 0, 52, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 159, 231, 76, 246, 40, 1, 0, 0, 0, 0, 0, 20, 8, 0, 0,
            44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 161, 231, 76, 222, 35, 44, 0, 0, 0, 0, 0, 110,
            8, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 84, 239, 93, 161, 198, 2, 0, 0, 0, 0,
            0, 216, 8, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 233, 174, 80, 153, 133, 1,
            0, 0, 0, 0, 0, 68, 9, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 78, 196, 87, 0,
            73, 49, 0, 0, 0, 0, 0, 158, 9, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 168,
            158, 85, 162, 109, 3, 0, 0, 0, 0, 0, 8, 10, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            124, 227, 132, 91, 83, 107, 70, 0, 0, 0, 0, 0, 154, 10, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 191, 224, 193, 93, 13, 53, 2, 0, 0, 0, 0, 0, 4, 11, 0, 0, 52, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 150, 174, 14, 94, 163, 81, 5, 0, 0, 0, 0, 0, 110, 11, 0, 0, 21, 0,
            0, 0, 131, 11, 0, 0, 21, 0, 0, 0, 152, 11, 0, 0, 21, 0, 0, 0, 173, 11, 0, 0, 21, 0, 0,
            0, 194, 11, 0, 0, 21, 0, 0, 0, 215, 11, 0, 0, 21, 0, 0, 0, 236, 11, 0, 0, 21, 0, 0, 0,
            1, 12, 0, 0, 21, 0, 0, 0, 22, 12, 0, 0, 21, 0, 0, 0, 43, 12, 0, 0, 21, 0, 0, 0, 64, 12,
            0, 0, 21, 0, 0, 0, 85, 12, 0, 0, 21, 0, 0, 0, 106, 12, 0, 0, 21, 0, 0, 0, 127, 12, 0,
            0, 21, 0, 0, 0, 148, 12, 0, 0, 21, 0, 0, 0, 169, 12, 0, 0, 21, 0, 0, 0, 190, 12, 0, 0,
            21, 0, 0, 0, 7, 0, 0, 0, 36, 19, 167, 30, 13, 0, 0, 0, 227, 93, 39, 0, 13, 0, 0, 0,
            227, 93, 39, 0, 10, 0, 0, 0, 246, 84, 123, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 24, 19, 167, 30, 79,
            0, 0, 0, 6, 132, 187, 0, 16, 0, 0, 0, 248, 80, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 176, 2, 0, 0, 0, 0, 0, 0,
            176, 2, 0, 0, 0, 0, 0, 0, 176, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            7, 0, 0, 0, 152, 234, 113, 1, 14, 0, 0, 0, 67, 55, 25, 0, 2, 0, 0, 0, 225, 193, 5, 0,
            2, 0, 0, 0, 225, 193, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 197, 14, 0, 0, 2, 0, 0,
            0, 134, 46, 226, 0, 5, 0, 0, 0, 209, 132, 26, 0, 1, 0, 0, 0, 210, 92, 4, 0, 1, 0, 0, 0,
            210, 92, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 128, 148, 26, 0, 2, 0, 0, 0, 213,
            182, 225, 0, 2, 0, 0, 0, 144, 15, 0, 0, 0, 0, 0, 0, 144, 15, 0, 0, 0, 0, 0, 0, 144, 15,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 38, 17, 0, 0, 6, 0, 0, 0, 177, 42, 160, 1, 6,
            0, 0, 0, 78, 8, 0, 0, 0, 0, 0, 0, 78, 8, 0, 0, 0, 0, 0, 0, 78, 8, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 6, 0, 0, 0, 78, 8, 0, 0, 4, 0, 0, 0, 141, 171, 94, 2, 18, 0, 0, 0, 161, 97,
            103, 0, 10, 0, 0, 0, 4, 157, 21, 0, 10, 0, 0, 0, 4, 157, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            4, 0, 0, 0, 49, 13, 59, 0, 2, 0, 0, 0, 247, 68, 0, 0, 2, 0, 0, 0, 145, 67, 0, 0, 0, 0,
            0, 0, 145, 67, 0, 0, 0, 0, 0, 0, 145, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,
            145, 67, 0, 0, 1, 0, 0, 0, 137, 50, 0, 0, 1, 0, 0, 0, 120, 6, 0, 0, 0, 0, 0, 0, 120, 6,
            0, 0, 0, 0, 0, 0, 120, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 155, 47, 0, 0, 1,
            0, 0, 0, 110, 5, 0, 0, 1, 0, 0, 0, 39, 4, 0, 0, 0, 0, 0, 0, 39, 4, 0, 0, 0, 0, 0, 0,
            39, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            9, 0, 0, 0, 147, 253, 31, 0, 0, 0, 0, 0, 110, 57, 7, 0, 0, 0, 0, 0, 110, 57, 7, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 24, 0, 35, 0, 35, 0, 0, 0, 0, 0, 0,
            0, 17, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 25, 0, 0, 0, 0, 0, 0, 0, 19, 0, 8, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 80, 0, 13, 0, 0, 0, 0, 0, 0, 0, 70, 0, 28, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
            0, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0,
            0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 39, 0, 0, 0, 0, 0, 0,
            0, 246, 0, 130, 0, 37, 0, 0, 0, 6, 0, 0, 0, 0, 0, 15, 0, 9, 0, 0, 0, 0, 0, 0, 0, 10, 0,
            3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 144, 0, 41, 0, 0, 0, 0, 0, 0, 0, 127, 0, 17, 0, 3, 0, 0, 0, 0, 0, 92, 0, 68, 0,
            69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 92, 0, 72, 0, 65, 0, 82, 0, 68, 0, 68, 0, 73, 0, 83,
            0, 75, 0, 86, 0, 79, 0, 76, 0, 85, 0, 77, 0, 69, 0, 50, 0, 92, 0, 87, 0, 73, 0, 78, 0,
            68, 0, 79, 0, 87, 0, 83, 0, 92, 0, 83, 0, 89, 0, 83, 0, 84, 0, 69, 0, 77, 0, 51, 0, 50,
            0, 92, 0, 67, 0, 83, 0, 82, 0, 83, 0, 83, 0, 46, 0, 69, 0, 88, 0, 69, 0, 0, 0, 92, 0,
            68, 0, 69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 92, 0, 72, 0, 65, 0, 82, 0, 68, 0, 68, 0, 73,
            0, 83, 0, 75, 0, 86, 0, 79, 0, 76, 0, 85, 0, 77, 0, 69, 0, 50, 0, 92, 0, 87, 0, 73, 0,
            78, 0, 68, 0, 79, 0, 87, 0, 83, 0, 92, 0, 83, 0, 89, 0, 83, 0, 84, 0, 69, 0, 77, 0, 51,
            0, 50, 0, 92, 0, 76, 0, 79, 0, 71, 0, 79, 0, 78, 0, 85, 0, 73, 0, 46, 0, 69, 0, 88, 0,
            69, 0, 0, 0, 92, 0, 68, 0, 69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 92, 0, 72, 0, 65, 0, 82,
            0, 68, 0, 68, 0, 73, 0, 83, 0, 75, 0, 86, 0, 79, 0, 76, 0, 85, 0, 77, 0, 69, 0, 50, 0,
            92, 0, 87, 0, 73, 0, 78, 0, 68, 0, 79, 0, 87, 0, 83, 0, 92, 0, 69, 0, 88, 0, 80, 0, 76,
            0, 79, 0, 82, 0, 69, 0, 82, 0, 46, 0, 69, 0, 88, 0, 69, 0, 0, 0, 92, 0, 68, 0, 69, 0,
            86, 0, 73, 0, 67, 0, 69, 0, 92, 0, 72, 0, 65, 0, 82, 0, 68, 0, 68, 0, 73, 0, 83, 0, 75,
            0, 86, 0, 79, 0, 76, 0, 85, 0, 77, 0, 69, 0, 50, 0, 92, 0, 87, 0, 73, 0, 78, 0, 68, 0,
            79, 0, 87, 0, 83, 0, 92, 0, 83, 0, 89, 0, 83, 0, 84, 0, 69, 0, 77, 0, 51, 0, 50, 0, 92,
            0, 87, 0, 85, 0, 65, 0, 85, 0, 67, 0, 76, 0, 84, 0, 46, 0, 69, 0, 88, 0, 69, 0, 0, 0,
            92, 0, 68, 0, 69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 92, 0, 72, 0, 65, 0, 82, 0, 68, 0, 68,
            0, 73, 0, 83, 0, 75, 0, 86, 0, 79, 0, 76, 0, 85, 0, 77, 0, 69, 0, 50, 0, 92, 0, 87, 0,
            73, 0, 78, 0, 68, 0, 79, 0, 87, 0, 83, 0, 92, 0, 83, 0, 89, 0, 83, 0, 84, 0, 69, 0, 77,
            0, 51, 0, 50, 0, 92, 0, 84, 0, 65, 0, 83, 0, 75, 0, 72, 0, 79, 0, 83, 0, 84, 0, 46, 0,
            69, 0, 88, 0, 69, 0, 0, 0, 92, 0, 68, 0, 69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 92, 0, 72,
            0, 65, 0, 82, 0, 68, 0, 68, 0, 73, 0, 83, 0, 75, 0, 86, 0, 79, 0, 76, 0, 85, 0, 77, 0,
            69, 0, 50, 0, 92, 0, 87, 0, 73, 0, 78, 0, 68, 0, 79, 0, 87, 0, 83, 0, 92, 0, 69, 0, 88,
            0, 80, 0, 76, 0, 79, 0, 82, 0, 69, 0, 82, 0, 46, 0, 69, 0, 88, 0, 69, 0, 0, 0, 92, 0,
            68, 0, 69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 92, 0, 72, 0, 65, 0, 82, 0, 68, 0, 68, 0, 73,
            0, 83, 0, 75, 0, 86, 0, 79, 0, 76, 0, 85, 0, 77, 0, 69, 0, 50, 0, 92, 0, 87, 0, 73, 0,
            78, 0, 68, 0, 79, 0, 87, 0, 83, 0, 92, 0, 83, 0, 89, 0, 83, 0, 84, 0, 69, 0, 77, 0, 51,
            0, 50, 0, 92, 0, 78, 0, 79, 0, 84, 0, 69, 0, 80, 0, 65, 0, 68, 0, 46, 0, 69, 0, 88, 0,
            69, 0, 0, 0, 92, 0, 68, 0, 69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 92, 0, 72, 0, 65, 0, 82,
            0, 68, 0, 68, 0, 73, 0, 83, 0, 75, 0, 86, 0, 79, 0, 76, 0, 85, 0, 77, 0, 69, 0, 50, 0,
            92, 0, 80, 0, 82, 0, 79, 0, 71, 0, 82, 0, 65, 0, 77, 0, 32, 0, 70, 0, 73, 0, 76, 0, 69,
            0, 83, 0, 92, 0, 87, 0, 73, 0, 78, 0, 68, 0, 79, 0, 87, 0, 83, 0, 32, 0, 78, 0, 84, 0,
            92, 0, 65, 0, 67, 0, 67, 0, 69, 0, 83, 0, 83, 0, 79, 0, 82, 0, 73, 0, 69, 0, 83, 0, 92,
            0, 87, 0, 79, 0, 82, 0, 68, 0, 80, 0, 65, 0, 68, 0, 46, 0, 69, 0, 88, 0, 69, 0, 0, 0,
            92, 0, 68, 0, 69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 92, 0, 72, 0, 65, 0, 82, 0, 68, 0, 68,
            0, 73, 0, 83, 0, 75, 0, 86, 0, 79, 0, 76, 0, 85, 0, 77, 0, 69, 0, 50, 0, 92, 0, 87, 0,
            73, 0, 78, 0, 68, 0, 79, 0, 87, 0, 83, 0, 92, 0, 83, 0, 89, 0, 83, 0, 84, 0, 69, 0, 77,
            0, 51, 0, 50, 0, 92, 0, 67, 0, 79, 0, 78, 0, 83, 0, 69, 0, 78, 0, 84, 0, 46, 0, 69, 0,
            88, 0, 69, 0, 0, 0, 92, 0, 68, 0, 69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 92, 0, 72, 0, 65,
            0, 82, 0, 68, 0, 68, 0, 73, 0, 83, 0, 75, 0, 86, 0, 79, 0, 76, 0, 85, 0, 77, 0, 69, 0,
            50, 0, 92, 0, 87, 0, 73, 0, 78, 0, 68, 0, 79, 0, 87, 0, 83, 0, 92, 0, 83, 0, 89, 0, 83,
            0, 84, 0, 69, 0, 77, 0, 51, 0, 50, 0, 92, 0, 67, 0, 79, 0, 78, 0, 72, 0, 79, 0, 83, 0,
            84, 0, 46, 0, 69, 0, 88, 0, 69, 0, 0, 0, 0, 0, 0, 0, 112, 3, 8, 30, 0, 0, 60, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 112, 3, 0, 30, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 3, 8, 30, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 1, 8, 6, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 1, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 32, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 6, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 0, 52, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0,
        ]
        .to_vec();
        assert_eq!(expected_output, decoded_value);

        let py_notatin_content = PyNotatinContent {
            inner: CellValue::ValueBinary(lznt1),
        };
        let decoded_value = py_notatin_content
            .decode(py, &PyNotatinDecodeFormat::lznt1(), 8)
            .unwrap()
            .extract::<PyNotatinContent>(py)
            .unwrap()
            .content(py)
            .unwrap()
            .extract::<Vec<u8>>(py)
            .unwrap();
        assert_eq!(expected_output, decoded_value);

        let decoded_value = py_notatin_content
            .decode(py, &PyNotatinDecodeFormat::lznt1(), 8)
            .unwrap()
            .extract::<PyNotatinContent>(py)
            .unwrap()
            .decode(py, &PyNotatinDecodeFormat::utf16_multiple(), 1860)
            .unwrap()
            .extract::<PyNotatinContent>(py)
            .unwrap()
            .content(py)
            .unwrap()
            .extract::<Vec<String>>(py)
            .unwrap();
        let expected_output = vec![
            r"\DEVICE\HARDDISKVOLUME2\WINDOWS\SYSTEM32\CSRSS.EXE".to_string(),
            r"\DEVICE\HARDDISKVOLUME2\WINDOWS\SYSTEM32\LOGONUI.EXE".to_string(),
            r"\DEVICE\HARDDISKVOLUME2\WINDOWS\EXPLORER.EXE".to_string(),
            r"\DEVICE\HARDDISKVOLUME2\WINDOWS\SYSTEM32\WUAUCLT.EXE".to_string(),
            r"\DEVICE\HARDDISKVOLUME2\WINDOWS\SYSTEM32\TASKHOST.EXE".to_string(),
            r"\DEVICE\HARDDISKVOLUME2\WINDOWS\EXPLORER.EXE".to_string(),
            r"\DEVICE\HARDDISKVOLUME2\WINDOWS\SYSTEM32\NOTEPAD.EXE".to_string(),
            r"\DEVICE\HARDDISKVOLUME2\PROGRAM FILES\WINDOWS NT\ACCESSORIES\WORDPAD.EXE".to_string(),
            r"\DEVICE\HARDDISKVOLUME2\WINDOWS\SYSTEM32\CONSENT.EXE".to_string(),
            r"\DEVICE\HARDDISKVOLUME2\WINDOWS\SYSTEM32\CONHOST.EXE".to_string(),
        ];
        assert_eq!(expected_output, decoded_value);

        let utf16_multiple = vec![
            0x4E, 0x00, 0x41, 0x00, 0x53, 0x00, 0x5F, 0x00, 0x72, 0x00, 0x65, 0x00, 0x71, 0x00,
            0x75, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x64, 0x00, 0x5F, 0x00,
            0x64, 0x00, 0x61, 0x00, 0x74, 0x00, 0x61, 0x00, 0x2E, 0x00, 0x37, 0x00, 0x7A, 0x00,
            0x00, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x48, 0x00,
            0x61, 0x00, 0x72, 0x00, 0x72, 0x00, 0x69, 0x00, 0x65, 0x00, 0x72, 0x00, 0x5F, 0x00,
            0x44, 0x00, 0x37, 0x00, 0x5F, 0x00, 0x69, 0x00, 0x36, 0x00, 0x38, 0x00, 0x36, 0x00,
            0x5F, 0x00, 0x46, 0x00, 0x44, 0x00, 0x45, 0x00, 0x5F, 0x00, 0x32, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x34, 0x00, 0x31, 0x00, 0x32, 0x00, 0x31, 0x00, 0x39, 0x00, 0x2E, 0x00,
            0x64, 0x00, 0x64, 0x00, 0x2E, 0x00, 0x37, 0x00, 0x7A, 0x00, 0x00, 0x00, 0x42, 0x00,
            0x6C, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x48, 0x00, 0x61, 0x00, 0x72, 0x00,
            0x72, 0x00, 0x69, 0x00, 0x65, 0x00, 0x72, 0x00, 0x5F, 0x00, 0x44, 0x00, 0x37, 0x00,
            0x5F, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x64, 0x00, 0x36, 0x00, 0x34, 0x00, 0x5F, 0x00,
            0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x31, 0x00, 0x32, 0x00, 0x31, 0x00,
            0x37, 0x00, 0x2E, 0x00, 0x37, 0x00, 0x7A, 0x00, 0x00, 0x00, 0x42, 0x00, 0x6C, 0x00,
            0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x48, 0x00, 0x61, 0x00, 0x72, 0x00, 0x72, 0x00,
            0x69, 0x00, 0x65, 0x00, 0x72, 0x00, 0x5F, 0x00, 0x44, 0x00, 0x37, 0x00, 0x5F, 0x00,
            0x61, 0x00, 0x6D, 0x00, 0x64, 0x00, 0x36, 0x00, 0x34, 0x00, 0x5F, 0x00, 0x46, 0x00,
            0x44, 0x00, 0x45, 0x00, 0x5F, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00,
            0x31, 0x00, 0x32, 0x00, 0x31, 0x00, 0x37, 0x00, 0x2E, 0x00, 0x37, 0x00, 0x7A, 0x00,
            0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00,
            0x72, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x6A, 0x00, 0x6D, 0x00, 0x72, 0x00, 0x6F, 0x00,
            0x62, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x44, 0x00,
            0x65, 0x00, 0x73, 0x00, 0x6B, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x5C, 0x00,
            0x55, 0x00, 0x53, 0x00, 0x42, 0x00, 0x5F, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00,
            0x65, 0x00, 0x61, 0x00, 0x72, 0x00, 0x63, 0x00, 0x68, 0x00, 0x5C, 0x00, 0x49, 0x00,
            0x45, 0x00, 0x46, 0x00, 0x2E, 0x00, 0x7A, 0x00, 0x69, 0x00, 0x70, 0x00, 0x00, 0x00,
            0x43, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x79, 0x00,
            0x5F, 0x00, 0x52, 0x00, 0x65, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x74, 0x00,
            0x5F, 0x00, 0x31, 0x00, 0x30, 0x00, 0x32, 0x00, 0x32, 0x00, 0x32, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x33, 0x00, 0x2E, 0x00, 0x76, 0x00, 0x69, 0x00, 0x72, 0x00, 0x2E, 0x00,
            0x7A, 0x00, 0x69, 0x00, 0x70, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x59, 0x00, 0x4E, 0x00,
            0x43, 0x00, 0x2E, 0x00, 0x37, 0x00, 0x7A, 0x00, 0x00, 0x00, 0x76, 0x00, 0x69, 0x00,
            0x72, 0x00, 0x75, 0x00, 0x73, 0x00, 0x65, 0x00, 0x73, 0x00, 0x2E, 0x00, 0x7A, 0x00,
            0x69, 0x00, 0x70, 0x00, 0x00, 0x00, 0x41, 0x00, 0x4C, 0x00, 0x4C, 0x00, 0x44, 0x00,
            0x41, 0x00, 0x54, 0x00, 0x41, 0x00, 0x2E, 0x00, 0x74, 0x00, 0x78, 0x00, 0x74, 0x00,
            0x2E, 0x00, 0x62, 0x00, 0x7A, 0x00, 0x32, 0x00, 0x00, 0x00,
        ];
        let py_notatin_content = PyNotatinContent {
            inner: CellValue::ValueBinary(utf16_multiple),
        };
        let decoded_value = py_notatin_content
            .decode(py, &PyNotatinDecodeFormat::utf16_multiple(), 0)
            .unwrap()
            .extract::<PyNotatinContent>(py)
            .unwrap()
            .content(py)
            .unwrap()
            .extract::<Vec<String>>(py)
            .unwrap();
        let expected_output = vec![
            "NAS_requested_data.7z".to_string(),
            "BlackHarrier_D7_i686_FDE_20141219.dd.7z".to_string(),
            "BlackHarrier_D7_amd64_20141217.7z".to_string(),
            "BlackHarrier_D7_amd64_FDE_20141217.7z".to_string(),
            r"C:\Users\jmroberts\Desktop\USB_Research\IEF.zip".to_string(),
            "Company_Report_10222013.vir.zip".to_string(),
            "LYNC.7z".to_string(),
            "viruses.zip".to_string(),
            "ALLDATA.txt.bz2".to_string(),
        ];
        assert_eq!(expected_output, decoded_value);

        let utf16 = vec![
            0x4E, 0x00, 0x41, 0x00, 0x53, 0x00, 0x5F, 0x00, 0x72, 0x00, 0x65, 0x00, 0x71, 0x00,
            0x75, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x64, 0x00, 0x5F, 0x00,
            0x64, 0x00, 0x61, 0x00, 0x74, 0x00, 0x61, 0x00, 0x2E, 0x00, 0x37, 0x00, 0x7A, 0x00,
        ];
        let py_notatin_content = PyNotatinContent {
            inner: CellValue::ValueBinary(utf16),
        };
        let decoded_value = py_notatin_content
            .decode(py, &PyNotatinDecodeFormat::utf16(), 0)
            .unwrap()
            .extract::<PyNotatinContent>(py)
            .unwrap()
            .content(py)
            .unwrap()
            .extract::<String>(py)
            .unwrap();
        let expected_output = "NAS_requested_data.7z".to_string();
        assert_eq!(expected_output, decoded_value);

        let py_notatin_content = PyNotatinContent {
            inner: CellValue::ValueString("Abgngva havg grfg.".to_string()),
        };
        let decoded_value = py_notatin_content
            .decode(py, &PyNotatinDecodeFormat::rot13(), 0)
            .unwrap()
            .extract::<PyNotatinContent>(py)
            .unwrap()
            .content(py)
            .unwrap()
            .extract::<String>(py)
            .unwrap();
        let expected_output = "Notatin unit test.".to_string();
        assert_eq!(expected_output, decoded_value);
    }
}
